#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nav.API
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Demo Database NAV (11-0)")]
	public partial class NavDatabaseContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void InsertObject(Object instance);
    partial void UpdateObject(Object instance);
    partial void DeleteObject(Object instance);
    partial void InsertObjectMetadata(ObjectMetadata instance);
    partial void UpdateObjectMetadata(ObjectMetadata instance);
    partial void DeleteObjectMetadata(ObjectMetadata instance);
    partial void InsertNAVApp(NAVApp instance);
    partial void UpdateNAVApp(NAVApp instance);
    partial void DeleteNAVApp(NAVApp instance);
    partial void InsertNAVAppCapabilities(NAVAppCapabilities instance);
    partial void UpdateNAVAppCapabilities(NAVAppCapabilities instance);
    partial void DeleteNAVAppCapabilities(NAVAppCapabilities instance);
    partial void InsertNAVAppDependencies(NAVAppDependencies instance);
    partial void UpdateNAVAppDependencies(NAVAppDependencies instance);
    partial void DeleteNAVAppDependencies(NAVAppDependencies instance);
    partial void InsertNAVAppDataArchive(NAVAppDataArchive instance);
    partial void UpdateNAVAppDataArchive(NAVAppDataArchive instance);
    partial void DeleteNAVAppDataArchive(NAVAppDataArchive instance);
    partial void InsertNAVAppInstalledApp(NAVAppInstalledApp instance);
    partial void UpdateNAVAppInstalledApp(NAVAppInstalledApp instance);
    partial void DeleteNAVAppInstalledApp(NAVAppInstalledApp instance);
    partial void InsertNAVAppObjectMetadata(NAVAppObjectMetadata instance);
    partial void UpdateNAVAppObjectMetadata(NAVAppObjectMetadata instance);
    partial void DeleteNAVAppObjectMetadata(NAVAppObjectMetadata instance);
    partial void InsertNAVAppObjectPrerequisites(NAVAppObjectPrerequisites instance);
    partial void UpdateNAVAppObjectPrerequisites(NAVAppObjectPrerequisites instance);
    partial void DeleteNAVAppObjectPrerequisites(NAVAppObjectPrerequisites instance);
    partial void InsertNAVAppResource(NAVAppResource instance);
    partial void UpdateNAVAppResource(NAVAppResource instance);
    partial void DeleteNAVAppResource(NAVAppResource instance);
    partial void InsertNAVAppTenantAddIn(NAVAppTenantAddIn instance);
    partial void UpdateNAVAppTenantAddIn(NAVAppTenantAddIn instance);
    partial void DeleteNAVAppTenantAddIn(NAVAppTenantAddIn instance);
    partial void InsertNAVAppTenantApp(NAVAppTenantApp instance);
    partial void UpdateNAVAppTenantApp(NAVAppTenantApp instance);
    partial void DeleteNAVAppTenantApp(NAVAppTenantApp instance);
    #endregion
		
		public NavDatabaseContext() : 
				base(global::Nav.API.Properties.Settings.Default.Demo_Database_NAV__11_0_ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NavDatabaseContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NavDatabaseContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NavDatabaseContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NavDatabaseContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Object> Object
		{
			get
			{
				return this.GetTable<Object>();
			}
		}
		
		public System.Data.Linq.Table<ObjectMetadata> ObjectMetadata
		{
			get
			{
				return this.GetTable<ObjectMetadata>();
			}
		}
		
		public System.Data.Linq.Table<NAVApp> NAVApp
		{
			get
			{
				return this.GetTable<NAVApp>();
			}
		}
		
		public System.Data.Linq.Table<NAVAppCapabilities> NAVAppCapabilities
		{
			get
			{
				return this.GetTable<NAVAppCapabilities>();
			}
		}
		
		public System.Data.Linq.Table<NAVAppDependencies> NAVAppDependencies
		{
			get
			{
				return this.GetTable<NAVAppDependencies>();
			}
		}
		
		public System.Data.Linq.Table<NAVAppDataArchive> NAVAppDataArchive
		{
			get
			{
				return this.GetTable<NAVAppDataArchive>();
			}
		}
		
		public System.Data.Linq.Table<NAVAppInstalledApp> NAVAppInstalledApp
		{
			get
			{
				return this.GetTable<NAVAppInstalledApp>();
			}
		}
		
		public System.Data.Linq.Table<NAVAppObjectMetadata> NAVAppObjectMetadata
		{
			get
			{
				return this.GetTable<NAVAppObjectMetadata>();
			}
		}
		
		public System.Data.Linq.Table<NAVAppObjectPrerequisites> NAVAppObjectPrerequisites
		{
			get
			{
				return this.GetTable<NAVAppObjectPrerequisites>();
			}
		}
		
		public System.Data.Linq.Table<NAVAppResource> NAVAppResource
		{
			get
			{
				return this.GetTable<NAVAppResource>();
			}
		}
		
		public System.Data.Linq.Table<NAVAppTenantAddIn> NAVAppTenantAddIn
		{
			get
			{
				return this.GetTable<NAVAppTenantAddIn>();
			}
		}
		
		public System.Data.Linq.Table<NAVAppTenantApp> NAVAppTenantApp
		{
			get
			{
				return this.GetTable<NAVAppTenantApp>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Object")]
	public partial class Object : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private int _Type;
		
		private string _Company_Name;
		
		private int _ID;
		
		private string _Name;
		
		private byte _Modified;
		
		private byte _Compiled;
		
		private System.Data.Linq.Binary _BLOB_Reference;
		
		private int _BLOB_Size;
		
		private int _DBM_Table_No_;
		
		private System.DateTime _Date;
		
		private System.DateTime _Time;
		
		private string _Version_List;
		
		private byte _Locked;
		
		private string _Locked_By;
		
		private EntitySet<ObjectMetadata> _Object_Metadata;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModifiedChanging(byte value);
    partial void OnModifiedChanged();
    partial void OnCompiledChanging(byte value);
    partial void OnCompiledChanged();
    partial void OnBLOBReferenceChanging(System.Data.Linq.Binary value);
    partial void OnBLOBReferenceChanged();
    partial void OnBLOBSizeChanging(int value);
    partial void OnBLOBSizeChanged();
    partial void OnDBMTableNoChanging(int value);
    partial void OnDBMTableNoChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnVersion_ListChanging(string value);
    partial void OnVersion_ListChanged();
    partial void OnLockedChanging(byte value);
    partial void OnLockedChanged();
    partial void OnLockedByChanging(string value);
    partial void OnLockedByChanged();
    #endregion
		
		public Object()
		{
			this._Object_Metadata = new EntitySet<ObjectMetadata>(new Action<ObjectMetadata>(this.attach_Object_Metadata), new Action<ObjectMetadata>(this.detach_Object_Metadata));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Company Name]", Storage="_Company_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string CompanyName
		{
			get
			{
				return this._Company_Name;
			}
			set
			{
				if ((this._Company_Name != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._Company_Name = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modified", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Compiled", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte Compiled
		{
			get
			{
				return this._Compiled;
			}
			set
			{
				if ((this._Compiled != value))
				{
					this.OnCompiledChanging(value);
					this.SendPropertyChanging();
					this._Compiled = value;
					this.SendPropertyChanged("Compiled");
					this.OnCompiledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[BLOB Reference]", Storage="_BLOB_Reference", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary BLOBReference
		{
			get
			{
				return this._BLOB_Reference;
			}
			set
			{
				if ((this._BLOB_Reference != value))
				{
					this.OnBLOBReferenceChanging(value);
					this.SendPropertyChanging();
					this._BLOB_Reference = value;
					this.SendPropertyChanged("BLOBReference");
					this.OnBLOBReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[BLOB Size]", Storage="_BLOB_Size", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int BLOBSize
		{
			get
			{
				return this._BLOB_Size;
			}
			set
			{
				if ((this._BLOB_Size != value))
				{
					this.OnBLOBSizeChanging(value);
					this.SendPropertyChanging();
					this._BLOB_Size = value;
					this.SendPropertyChanged("BLOBSize");
					this.OnBLOBSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[DBM Table No_]", Storage="_DBM_Table_No_", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int DBMTableNo
		{
			get
			{
				return this._DBM_Table_No_;
			}
			set
			{
				if ((this._DBM_Table_No_ != value))
				{
					this.OnDBMTableNoChanging(value);
					this.SendPropertyChanging();
					this._DBM_Table_No_ = value;
					this.SendPropertyChanged("DBMTableNo");
					this.OnDBMTableNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version List]", Storage="_Version_List", DbType="VarChar(248) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Version_List
		{
			get
			{
				return this._Version_List;
			}
			set
			{
				if ((this._Version_List != value))
				{
					this.OnVersion_ListChanging(value);
					this.SendPropertyChanging();
					this._Version_List = value;
					this.SendPropertyChanged("Version_List");
					this.OnVersion_ListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locked", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte Locked
		{
			get
			{
				return this._Locked;
			}
			set
			{
				if ((this._Locked != value))
				{
					this.OnLockedChanging(value);
					this.SendPropertyChanging();
					this._Locked = value;
					this.SendPropertyChanged("Locked");
					this.OnLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Locked By]", Storage="_Locked_By", DbType="VarChar(132) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LockedBy
		{
			get
			{
				return this._Locked_By;
			}
			set
			{
				if ((this._Locked_By != value))
				{
					this.OnLockedByChanging(value);
					this.SendPropertyChanging();
					this._Locked_By = value;
					this.SendPropertyChanged("LockedBy");
					this.OnLockedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_ObjectMetadata", Storage="_Object_Metadata", ThisKey="Type,ID", OtherKey="ObjectType,ObjectID")]
		public EntitySet<ObjectMetadata> ObjectMetadata
		{
			get
			{
				return this._Object_Metadata;
			}
			set
			{
				this._Object_Metadata.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Object_Metadata(ObjectMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Object = this;
		}
		
		private void detach_Object_Metadata(ObjectMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Object = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Object Metadata]")]
	public partial class ObjectMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private int _Object_Type;
		
		private int _Object_ID;
		
		private System.Data.Linq.Binary _Metadata;
		
		private System.Data.Linq.Binary _User_Code;
		
		private System.Data.Linq.Binary _User_AL_Code;
		
		private int _Metadata_Version;
		
		private string _Hash;
		
		private string _Object_Subtype;
		
		private byte _Has_Subscribers;
		
		private System.Data.Linq.Binary _Symbol_Reference;
		
		private EntityRef<Object> _Object;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnObjectTypeChanging(int value);
    partial void OnObjectTypeChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnMetadataChanging(System.Data.Linq.Binary value);
    partial void OnMetadataChanged();
    partial void OnUserCodeChanging(System.Data.Linq.Binary value);
    partial void OnUserCodeChanged();
    partial void OnUserALCodeChanging(System.Data.Linq.Binary value);
    partial void OnUserALCodeChanged();
    partial void OnMetadataVersionChanging(int value);
    partial void OnMetadataVersionChanged();
    partial void OnHashChanging(string value);
    partial void OnHashChanged();
    partial void OnObjectSubtypeChanging(string value);
    partial void OnObjectSubtypeChanged();
    partial void OnHasSubscribersChanging(byte value);
    partial void OnHasSubscribersChanged();
    partial void OnSymbolReferenceChanging(System.Data.Linq.Binary value);
    partial void OnSymbolReferenceChanged();
    #endregion
		
		public ObjectMetadata()
		{
			this._Object = default(EntityRef<Object>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Object Type]", Storage="_Object_Type", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ObjectType
		{
			get
			{
				return this._Object_Type;
			}
			set
			{
				if ((this._Object_Type != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._Object_Type = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Object ID]", Storage="_Object_ID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ObjectID
		{
			get
			{
				return this._Object_ID;
			}
			set
			{
				if ((this._Object_ID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._Object_ID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Metadata", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Metadata
		{
			get
			{
				return this._Metadata;
			}
			set
			{
				if ((this._Metadata != value))
				{
					this.OnMetadataChanging(value);
					this.SendPropertyChanging();
					this._Metadata = value;
					this.SendPropertyChanged("Metadata");
					this.OnMetadataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User Code]", Storage="_User_Code", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UserCode
		{
			get
			{
				return this._User_Code;
			}
			set
			{
				if ((this._User_Code != value))
				{
					this.OnUserCodeChanging(value);
					this.SendPropertyChanging();
					this._User_Code = value;
					this.SendPropertyChanged("UserCode");
					this.OnUserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User AL Code]", Storage="_User_AL_Code", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UserALCode
		{
			get
			{
				return this._User_AL_Code;
			}
			set
			{
				if ((this._User_AL_Code != value))
				{
					this.OnUserALCodeChanging(value);
					this.SendPropertyChanging();
					this._User_AL_Code = value;
					this.SendPropertyChanged("UserALCode");
					this.OnUserALCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Metadata Version]", Storage="_Metadata_Version", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MetadataVersion
		{
			get
			{
				return this._Metadata_Version;
			}
			set
			{
				if ((this._Metadata_Version != value))
				{
					this.OnMetadataVersionChanging(value);
					this.SendPropertyChanging();
					this._Metadata_Version = value;
					this.SendPropertyChanged("MetadataVersion");
					this.OnMetadataVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hash", DbType="NVarChar(32) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Hash
		{
			get
			{
				return this._Hash;
			}
			set
			{
				if ((this._Hash != value))
				{
					this.OnHashChanging(value);
					this.SendPropertyChanging();
					this._Hash = value;
					this.SendPropertyChanged("Hash");
					this.OnHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Object Subtype]", Storage="_Object_Subtype", DbType="NVarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectSubtype
		{
			get
			{
				return this._Object_Subtype;
			}
			set
			{
				if ((this._Object_Subtype != value))
				{
					this.OnObjectSubtypeChanging(value);
					this.SendPropertyChanging();
					this._Object_Subtype = value;
					this.SendPropertyChanged("ObjectSubtype");
					this.OnObjectSubtypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Has Subscribers]", Storage="_Has_Subscribers", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte HasSubscribers
		{
			get
			{
				return this._Has_Subscribers;
			}
			set
			{
				if ((this._Has_Subscribers != value))
				{
					this.OnHasSubscribersChanging(value);
					this.SendPropertyChanging();
					this._Has_Subscribers = value;
					this.SendPropertyChanged("HasSubscribers");
					this.OnHasSubscribersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Symbol Reference]", Storage="_Symbol_Reference", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary SymbolReference
		{
			get
			{
				return this._Symbol_Reference;
			}
			set
			{
				if ((this._Symbol_Reference != value))
				{
					this.OnSymbolReferenceChanging(value);
					this.SendPropertyChanging();
					this._Symbol_Reference = value;
					this.SendPropertyChanged("SymbolReference");
					this.OnSymbolReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Object_ObjectMetadata", Storage="_Object", ThisKey="ObjectType,ObjectID", OtherKey="Type,ID", IsForeignKey=true)]
		public Object Object
		{
			get
			{
				return this._Object.Entity;
			}
			set
			{
				Object previousValue = this._Object.Entity;
				if (((previousValue != value) 
							|| (this._Object.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Object.Entity = null;
						previousValue.ObjectMetadata.Remove(this);
					}
					this._Object.Entity = value;
					if ((value != null))
					{
						value.ObjectMetadata.Add(this);
						this._Object_Type = value.Type;
						this._Object_ID = value.ID;
					}
					else
					{
						this._Object_Type = default(int);
						this._Object_ID = default(int);
					}
					this.SendPropertyChanged("Object");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App]")]
	public partial class NAVApp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private System.Guid _Package_ID;
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Publisher;
		
		private int _Version_Major;
		
		private int _Version_Minor;
		
		private int _Version_Build;
		
		private int _Version_Revision;
		
		private int _Compatibility_Major;
		
		private int _Compatibility_Minor;
		
		private int _Compatibility_Build;
		
		private int _Compatibility_Revision;
		
		private string _Brief;
		
		private System.Data.Linq.Binary _Description;
		
		private string _Privacy_Statement;
		
		private string _EULA;
		
		private string _Url;
		
		private string _Help;
		
		private System.Guid _Logo;
		
		private System.Guid _Screenshots;
		
		private System.Data.Linq.Binary _Blob;
		
		private int _Package_Type;
		
		private System.Data.Linq.Binary _Symbols;
		
		private string _Content_Hash;
		
		private string _Tenant_ID;
		
		private byte _Show_My_Code;
		
		private EntitySet<NAVAppCapabilities> _NAV_App_Capabilities;
		
		private EntitySet<NAVAppDataArchive> _NAV_App_Data_Archive;
		
		private EntitySet<NAVAppInstalledApp> _NAV_App_Installed_App;
		
		private EntitySet<NAVAppObjectMetadata> _NAV_App_Object_Metadata;
		
		private EntitySet<NAVAppObjectPrerequisites> _NAV_App_Object_Prerequisites;
		
		private EntitySet<NAVAppResource> _NAV_App_Resource;
		
		private EntitySet<NAVAppTenantAddIn> _NAV_App_Tenant_Add_In;
		
		private EntitySet<NAVAppTenantApp> _NAV_App_Tenant_App;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnPackageIDChanging(System.Guid value);
    partial void OnPackageIDChanged();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    partial void OnVersionMajorChanging(int value);
    partial void OnVersionMajorChanged();
    partial void OnVersionMinorChanging(int value);
    partial void OnVersionMinorChanged();
    partial void OnVersionBuildChanging(int value);
    partial void OnVersionBuildChanged();
    partial void OnVersionRevisionChanging(int value);
    partial void OnVersionRevisionChanged();
    partial void OnCompatibilityMajorChanging(int value);
    partial void OnCompatibilityMajorChanged();
    partial void OnCompatibilityMinorChanging(int value);
    partial void OnCompatibilityMinorChanged();
    partial void OnCompatibilityBuildChanging(int value);
    partial void OnCompatibilityBuildChanged();
    partial void OnCompatibilityRevisionChanging(int value);
    partial void OnCompatibilityRevisionChanged();
    partial void OnBriefChanging(string value);
    partial void OnBriefChanged();
    partial void OnDescriptionChanging(System.Data.Linq.Binary value);
    partial void OnDescriptionChanged();
    partial void OnPrivacyStatementChanging(string value);
    partial void OnPrivacyStatementChanged();
    partial void OnEULAChanging(string value);
    partial void OnEULAChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnHelpChanging(string value);
    partial void OnHelpChanged();
    partial void OnLogoChanging(System.Guid value);
    partial void OnLogoChanged();
    partial void OnScreenshotsChanging(System.Guid value);
    partial void OnScreenshotsChanged();
    partial void OnBlobChanging(System.Data.Linq.Binary value);
    partial void OnBlobChanged();
    partial void OnPackageTypeChanging(int value);
    partial void OnPackageTypeChanged();
    partial void OnSymbolsChanging(System.Data.Linq.Binary value);
    partial void OnSymbolsChanged();
    partial void OnContentHashChanging(string value);
    partial void OnContentHashChanged();
    partial void OnTenantIDChanging(string value);
    partial void OnTenantIDChanged();
    partial void OnShowMyCodeChanging(byte value);
    partial void OnShowMyCodeChanged();
    #endregion
		
		public NAVApp()
		{
			this._NAV_App_Capabilities = new EntitySet<NAVAppCapabilities>(new Action<NAVAppCapabilities>(this.attach_NAV_App_Capabilities), new Action<NAVAppCapabilities>(this.detach_NAV_App_Capabilities));
			this._NAV_App_Data_Archive = new EntitySet<NAVAppDataArchive>(new Action<NAVAppDataArchive>(this.attach_NAV_App_Data_Archive), new Action<NAVAppDataArchive>(this.detach_NAV_App_Data_Archive));
			this._NAV_App_Installed_App = new EntitySet<NAVAppInstalledApp>(new Action<NAVAppInstalledApp>(this.attach_NAV_App_Installed_App), new Action<NAVAppInstalledApp>(this.detach_NAV_App_Installed_App));
			this._NAV_App_Object_Metadata = new EntitySet<NAVAppObjectMetadata>(new Action<NAVAppObjectMetadata>(this.attach_NAV_App_Object_Metadata), new Action<NAVAppObjectMetadata>(this.detach_NAV_App_Object_Metadata));
			this._NAV_App_Object_Prerequisites = new EntitySet<NAVAppObjectPrerequisites>(new Action<NAVAppObjectPrerequisites>(this.attach_NAV_App_Object_Prerequisites), new Action<NAVAppObjectPrerequisites>(this.detach_NAV_App_Object_Prerequisites));
			this._NAV_App_Resource = new EntitySet<NAVAppResource>(new Action<NAVAppResource>(this.attach_NAV_App_Resource), new Action<NAVAppResource>(this.detach_NAV_App_Resource));
			this._NAV_App_Tenant_Add_In = new EntitySet<NAVAppTenantAddIn>(new Action<NAVAppTenantAddIn>(this.attach_NAV_App_Tenant_Add_In), new Action<NAVAppTenantAddIn>(this.detach_NAV_App_Tenant_Add_In));
			this._NAV_App_Tenant_App = new EntitySet<NAVAppTenantApp>(new Action<NAVAppTenantApp>(this.attach_NAV_App_Tenant_App), new Action<NAVAppTenantApp>(this.detach_NAV_App_Tenant_App));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Package ID]", Storage="_Package_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid PackageID
		{
			get
			{
				return this._Package_ID;
			}
			set
			{
				if ((this._Package_ID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._Package_ID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Major]", Storage="_Version_Major", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionMajor
		{
			get
			{
				return this._Version_Major;
			}
			set
			{
				if ((this._Version_Major != value))
				{
					this.OnVersionMajorChanging(value);
					this.SendPropertyChanging();
					this._Version_Major = value;
					this.SendPropertyChanged("VersionMajor");
					this.OnVersionMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Minor]", Storage="_Version_Minor", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionMinor
		{
			get
			{
				return this._Version_Minor;
			}
			set
			{
				if ((this._Version_Minor != value))
				{
					this.OnVersionMinorChanging(value);
					this.SendPropertyChanging();
					this._Version_Minor = value;
					this.SendPropertyChanged("VersionMinor");
					this.OnVersionMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Build]", Storage="_Version_Build", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionBuild
		{
			get
			{
				return this._Version_Build;
			}
			set
			{
				if ((this._Version_Build != value))
				{
					this.OnVersionBuildChanging(value);
					this.SendPropertyChanging();
					this._Version_Build = value;
					this.SendPropertyChanged("VersionBuild");
					this.OnVersionBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Revision]", Storage="_Version_Revision", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionRevision
		{
			get
			{
				return this._Version_Revision;
			}
			set
			{
				if ((this._Version_Revision != value))
				{
					this.OnVersionRevisionChanging(value);
					this.SendPropertyChanging();
					this._Version_Revision = value;
					this.SendPropertyChanged("VersionRevision");
					this.OnVersionRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Major]", Storage="_Compatibility_Major", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityMajor
		{
			get
			{
				return this._Compatibility_Major;
			}
			set
			{
				if ((this._Compatibility_Major != value))
				{
					this.OnCompatibilityMajorChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Major = value;
					this.SendPropertyChanged("CompatibilityMajor");
					this.OnCompatibilityMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Minor]", Storage="_Compatibility_Minor", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityMinor
		{
			get
			{
				return this._Compatibility_Minor;
			}
			set
			{
				if ((this._Compatibility_Minor != value))
				{
					this.OnCompatibilityMinorChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Minor = value;
					this.SendPropertyChanged("CompatibilityMinor");
					this.OnCompatibilityMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Build]", Storage="_Compatibility_Build", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityBuild
		{
			get
			{
				return this._Compatibility_Build;
			}
			set
			{
				if ((this._Compatibility_Build != value))
				{
					this.OnCompatibilityBuildChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Build = value;
					this.SendPropertyChanged("CompatibilityBuild");
					this.OnCompatibilityBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Revision]", Storage="_Compatibility_Revision", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityRevision
		{
			get
			{
				return this._Compatibility_Revision;
			}
			set
			{
				if ((this._Compatibility_Revision != value))
				{
					this.OnCompatibilityRevisionChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Revision = value;
					this.SendPropertyChanged("CompatibilityRevision");
					this.OnCompatibilityRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brief", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Brief
		{
			get
			{
				return this._Brief;
			}
			set
			{
				if ((this._Brief != value))
				{
					this.OnBriefChanging(value);
					this.SendPropertyChanging();
					this._Brief = value;
					this.SendPropertyChanged("Brief");
					this.OnBriefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Privacy Statement]", Storage="_Privacy_Statement", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PrivacyStatement
		{
			get
			{
				return this._Privacy_Statement;
			}
			set
			{
				if ((this._Privacy_Statement != value))
				{
					this.OnPrivacyStatementChanging(value);
					this.SendPropertyChanging();
					this._Privacy_Statement = value;
					this.SendPropertyChanged("PrivacyStatement");
					this.OnPrivacyStatementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EULA", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EULA
		{
			get
			{
				return this._EULA;
			}
			set
			{
				if ((this._EULA != value))
				{
					this.OnEULAChanging(value);
					this.SendPropertyChanging();
					this._EULA = value;
					this.SendPropertyChanged("EULA");
					this.OnEULAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Help", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Help
		{
			get
			{
				return this._Help;
			}
			set
			{
				if ((this._Help != value))
				{
					this.OnHelpChanging(value);
					this.SendPropertyChanging();
					this._Help = value;
					this.SendPropertyChanged("Help");
					this.OnHelpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Screenshots", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid Screenshots
		{
			get
			{
				return this._Screenshots;
			}
			set
			{
				if ((this._Screenshots != value))
				{
					this.OnScreenshotsChanging(value);
					this.SendPropertyChanging();
					this._Screenshots = value;
					this.SendPropertyChanged("Screenshots");
					this.OnScreenshotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Blob", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Blob
		{
			get
			{
				return this._Blob;
			}
			set
			{
				if ((this._Blob != value))
				{
					this.OnBlobChanging(value);
					this.SendPropertyChanging();
					this._Blob = value;
					this.SendPropertyChanged("Blob");
					this.OnBlobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Package Type]", Storage="_Package_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PackageType
		{
			get
			{
				return this._Package_Type;
			}
			set
			{
				if ((this._Package_Type != value))
				{
					this.OnPackageTypeChanging(value);
					this.SendPropertyChanging();
					this._Package_Type = value;
					this.SendPropertyChanged("PackageType");
					this.OnPackageTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbols", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Symbols
		{
			get
			{
				return this._Symbols;
			}
			set
			{
				if ((this._Symbols != value))
				{
					this.OnSymbolsChanging(value);
					this.SendPropertyChanging();
					this._Symbols = value;
					this.SendPropertyChanged("Symbols");
					this.OnSymbolsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Content Hash]", Storage="_Content_Hash", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ContentHash
		{
			get
			{
				return this._Content_Hash;
			}
			set
			{
				if ((this._Content_Hash != value))
				{
					this.OnContentHashChanging(value);
					this.SendPropertyChanging();
					this._Content_Hash = value;
					this.SendPropertyChanged("ContentHash");
					this.OnContentHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Tenant ID]", Storage="_Tenant_ID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TenantID
		{
			get
			{
				return this._Tenant_ID;
			}
			set
			{
				if ((this._Tenant_ID != value))
				{
					this.OnTenantIDChanging(value);
					this.SendPropertyChanging();
					this._Tenant_ID = value;
					this.SendPropertyChanged("TenantID");
					this.OnTenantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Show My Code]", Storage="_Show_My_Code", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte ShowMyCode
		{
			get
			{
				return this._Show_My_Code;
			}
			set
			{
				if ((this._Show_My_Code != value))
				{
					this.OnShowMyCodeChanging(value);
					this.SendPropertyChanging();
					this._Show_My_Code = value;
					this.SendPropertyChanged("ShowMyCode");
					this.OnShowMyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppCapabilities", Storage="_NAV_App_Capabilities", ThisKey="PackageID", OtherKey="PackageID")]
		public EntitySet<NAVAppCapabilities> NAVAppCapabilities
		{
			get
			{
				return this._NAV_App_Capabilities;
			}
			set
			{
				this._NAV_App_Capabilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppDataArchive", Storage="_NAV_App_Data_Archive", ThisKey="ID", OtherKey="AppID")]
		public EntitySet<NAVAppDataArchive> NAVAppDataArchive
		{
			get
			{
				return this._NAV_App_Data_Archive;
			}
			set
			{
				this._NAV_App_Data_Archive.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppInstalledApp", Storage="_NAV_App_Installed_App", ThisKey="ID,PackageID", OtherKey="AppID,PackageID")]
		public EntitySet<NAVAppInstalledApp> NAVAppInstalledApp
		{
			get
			{
				return this._NAV_App_Installed_App;
			}
			set
			{
				this._NAV_App_Installed_App.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppObjectMetadata", Storage="_NAV_App_Object_Metadata", ThisKey="PackageID", OtherKey="AppPackageID")]
		public EntitySet<NAVAppObjectMetadata> NAVAppObjectMetadata
		{
			get
			{
				return this._NAV_App_Object_Metadata;
			}
			set
			{
				this._NAV_App_Object_Metadata.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppObjectPrerequisites", Storage="_NAV_App_Object_Prerequisites", ThisKey="PackageID", OtherKey="PackageID")]
		public EntitySet<NAVAppObjectPrerequisites> NAVAppObjectPrerequisites
		{
			get
			{
				return this._NAV_App_Object_Prerequisites;
			}
			set
			{
				this._NAV_App_Object_Prerequisites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppResource", Storage="_NAV_App_Resource", ThisKey="PackageID", OtherKey="PackageID")]
		public EntitySet<NAVAppResource> NAVAppResource
		{
			get
			{
				return this._NAV_App_Resource;
			}
			set
			{
				this._NAV_App_Resource.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppTenantAddIn", Storage="_NAV_App_Tenant_Add_In", ThisKey="ID", OtherKey="AppID")]
		public EntitySet<NAVAppTenantAddIn> NAVAppTenantAddIn
		{
			get
			{
				return this._NAV_App_Tenant_Add_In;
			}
			set
			{
				this._NAV_App_Tenant_Add_In.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppTenantApp", Storage="_NAV_App_Tenant_App", ThisKey="PackageID,TenantID", OtherKey="AppPackageID,TenantID")]
		public EntitySet<NAVAppTenantApp> NAVAppTenantApp
		{
			get
			{
				return this._NAV_App_Tenant_App;
			}
			set
			{
				this._NAV_App_Tenant_App.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NAV_App_Capabilities(NAVAppCapabilities entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = this;
		}
		
		private void detach_NAV_App_Capabilities(NAVAppCapabilities entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = null;
		}
		
		private void attach_NAV_App_Data_Archive(NAVAppDataArchive entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = this;
		}
		
		private void detach_NAV_App_Data_Archive(NAVAppDataArchive entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = null;
		}
		
		private void attach_NAV_App_Installed_App(NAVAppInstalledApp entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = this;
		}
		
		private void detach_NAV_App_Installed_App(NAVAppInstalledApp entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = null;
		}
		
		private void attach_NAV_App_Object_Metadata(NAVAppObjectMetadata entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = this;
		}
		
		private void detach_NAV_App_Object_Metadata(NAVAppObjectMetadata entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = null;
		}
		
		private void attach_NAV_App_Object_Prerequisites(NAVAppObjectPrerequisites entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = this;
		}
		
		private void detach_NAV_App_Object_Prerequisites(NAVAppObjectPrerequisites entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = null;
		}
		
		private void attach_NAV_App_Resource(NAVAppResource entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = this;
		}
		
		private void detach_NAV_App_Resource(NAVAppResource entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = null;
		}
		
		private void attach_NAV_App_Tenant_Add_In(NAVAppTenantAddIn entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = this;
		}
		
		private void detach_NAV_App_Tenant_Add_In(NAVAppTenantAddIn entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = null;
		}
		
		private void attach_NAV_App_Tenant_App(NAVAppTenantApp entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = this;
		}
		
		private void detach_NAV_App_Tenant_App(NAVAppTenantApp entity)
		{
			this.SendPropertyChanging();
			entity.NAVApp = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App Capabilities]")]
	public partial class NAVAppCapabilities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private System.Guid _Package_ID;
		
		private int _Capability_ID;
		
		private EntityRef<NAVApp> _NAV_App;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnPackageIDChanging(System.Guid value);
    partial void OnPackageIDChanged();
    partial void OnCapabilityIDChanging(int value);
    partial void OnCapabilityIDChanged();
    #endregion
		
		public NAVAppCapabilities()
		{
			this._NAV_App = default(EntityRef<NAVApp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Package ID]", Storage="_Package_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid PackageID
		{
			get
			{
				return this._Package_ID;
			}
			set
			{
				if ((this._Package_ID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._Package_ID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Capability ID]", Storage="_Capability_ID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int CapabilityID
		{
			get
			{
				return this._Capability_ID;
			}
			set
			{
				if ((this._Capability_ID != value))
				{
					this.OnCapabilityIDChanging(value);
					this.SendPropertyChanging();
					this._Capability_ID = value;
					this.SendPropertyChanged("CapabilityID");
					this.OnCapabilityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppCapabilities", Storage="_NAV_App", ThisKey="PackageID", OtherKey="PackageID", IsForeignKey=true)]
		public NAVApp NAVApp
		{
			get
			{
				return this._NAV_App.Entity;
			}
			set
			{
				NAVApp previousValue = this._NAV_App.Entity;
				if (((previousValue != value) 
							|| (this._NAV_App.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAV_App.Entity = null;
						previousValue.NAVAppCapabilities.Remove(this);
					}
					this._NAV_App.Entity = value;
					if ((value != null))
					{
						value.NAVAppCapabilities.Add(this);
						this._Package_ID = value.PackageID;
					}
					else
					{
						this._Package_ID = default(System.Guid);
					}
					this.SendPropertyChanged("NAVApp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App Dependencies]")]
	public partial class NAVAppDependencies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private System.Guid _Package_ID;
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Publisher;
		
		private int _Version_Major;
		
		private int _Version_Minor;
		
		private int _Version_Build;
		
		private int _Version_Revision;
		
		private int _Compatibility_Major;
		
		private int _Compatibility_Minor;
		
		private int _Compatibility_Build;
		
		private int _Compatibility_Revision;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnPackageIDChanging(System.Guid value);
    partial void OnPackageIDChanged();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    partial void OnVersionMajorChanging(int value);
    partial void OnVersionMajorChanged();
    partial void OnVersionMinorChanging(int value);
    partial void OnVersionMinorChanged();
    partial void OnVersionBuildChanging(int value);
    partial void OnVersionBuildChanged();
    partial void OnVersionRevisionChanging(int value);
    partial void OnVersionRevisionChanged();
    partial void OnCompatibilityMajorChanging(int value);
    partial void OnCompatibilityMajorChanged();
    partial void OnCompatibilityMinorChanging(int value);
    partial void OnCompatibilityMinorChanged();
    partial void OnCompatibilityBuildChanging(int value);
    partial void OnCompatibilityBuildChanged();
    partial void OnCompatibilityRevisionChanging(int value);
    partial void OnCompatibilityRevisionChanged();
    #endregion
		
		public NAVAppDependencies()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Package ID]", Storage="_Package_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid PackageID
		{
			get
			{
				return this._Package_ID;
			}
			set
			{
				if ((this._Package_ID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._Package_ID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Major]", Storage="_Version_Major", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionMajor
		{
			get
			{
				return this._Version_Major;
			}
			set
			{
				if ((this._Version_Major != value))
				{
					this.OnVersionMajorChanging(value);
					this.SendPropertyChanging();
					this._Version_Major = value;
					this.SendPropertyChanged("VersionMajor");
					this.OnVersionMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Minor]", Storage="_Version_Minor", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionMinor
		{
			get
			{
				return this._Version_Minor;
			}
			set
			{
				if ((this._Version_Minor != value))
				{
					this.OnVersionMinorChanging(value);
					this.SendPropertyChanging();
					this._Version_Minor = value;
					this.SendPropertyChanged("VersionMinor");
					this.OnVersionMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Build]", Storage="_Version_Build", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionBuild
		{
			get
			{
				return this._Version_Build;
			}
			set
			{
				if ((this._Version_Build != value))
				{
					this.OnVersionBuildChanging(value);
					this.SendPropertyChanging();
					this._Version_Build = value;
					this.SendPropertyChanged("VersionBuild");
					this.OnVersionBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Revision]", Storage="_Version_Revision", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionRevision
		{
			get
			{
				return this._Version_Revision;
			}
			set
			{
				if ((this._Version_Revision != value))
				{
					this.OnVersionRevisionChanging(value);
					this.SendPropertyChanging();
					this._Version_Revision = value;
					this.SendPropertyChanged("VersionRevision");
					this.OnVersionRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Major]", Storage="_Compatibility_Major", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityMajor
		{
			get
			{
				return this._Compatibility_Major;
			}
			set
			{
				if ((this._Compatibility_Major != value))
				{
					this.OnCompatibilityMajorChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Major = value;
					this.SendPropertyChanged("CompatibilityMajor");
					this.OnCompatibilityMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Minor]", Storage="_Compatibility_Minor", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityMinor
		{
			get
			{
				return this._Compatibility_Minor;
			}
			set
			{
				if ((this._Compatibility_Minor != value))
				{
					this.OnCompatibilityMinorChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Minor = value;
					this.SendPropertyChanged("CompatibilityMinor");
					this.OnCompatibilityMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Build]", Storage="_Compatibility_Build", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityBuild
		{
			get
			{
				return this._Compatibility_Build;
			}
			set
			{
				if ((this._Compatibility_Build != value))
				{
					this.OnCompatibilityBuildChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Build = value;
					this.SendPropertyChanged("CompatibilityBuild");
					this.OnCompatibilityBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Revision]", Storage="_Compatibility_Revision", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityRevision
		{
			get
			{
				return this._Compatibility_Revision;
			}
			set
			{
				if ((this._Compatibility_Revision != value))
				{
					this.OnCompatibilityRevisionChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Revision = value;
					this.SendPropertyChanged("CompatibilityRevision");
					this.OnCompatibilityRevisionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App Data Archive]")]
	public partial class NAVAppDataArchive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private System.Guid _App_ID;
		
		private int _Table_ID;
		
		private string _Company_Name;
		
		private int _Version_Major;
		
		private int _Version_Minor;
		
		private int _Version_Build;
		
		private int _Version_Revision;
		
		private string _Archive_Table_Name;
		
		private System.Data.Linq.Binary _Metadata;
		
		private int _Table_Blob_Version;
		
		private EntityRef<NAVApp> _NAV_App;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnAppIDChanging(System.Guid value);
    partial void OnAppIDChanged();
    partial void OnTableIDChanging(int value);
    partial void OnTableIDChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnVersionMajorChanging(int value);
    partial void OnVersionMajorChanged();
    partial void OnVersionMinorChanging(int value);
    partial void OnVersionMinorChanged();
    partial void OnVersionBuildChanging(int value);
    partial void OnVersionBuildChanged();
    partial void OnVersionRevisionChanging(int value);
    partial void OnVersionRevisionChanged();
    partial void OnArchiveTableNameChanging(string value);
    partial void OnArchiveTableNameChanged();
    partial void OnMetadataChanging(System.Data.Linq.Binary value);
    partial void OnMetadataChanged();
    partial void OnTableBlobVersionChanging(int value);
    partial void OnTableBlobVersionChanged();
    #endregion
		
		public NAVAppDataArchive()
		{
			this._NAV_App = default(EntityRef<NAVApp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[App ID]", Storage="_App_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid AppID
		{
			get
			{
				return this._App_ID;
			}
			set
			{
				if ((this._App_ID != value))
				{
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._App_ID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Table ID]", Storage="_Table_ID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int TableID
		{
			get
			{
				return this._Table_ID;
			}
			set
			{
				if ((this._Table_ID != value))
				{
					this.OnTableIDChanging(value);
					this.SendPropertyChanging();
					this._Table_ID = value;
					this.SendPropertyChanged("TableID");
					this.OnTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Company Name]", Storage="_Company_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string CompanyName
		{
			get
			{
				return this._Company_Name;
			}
			set
			{
				if ((this._Company_Name != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._Company_Name = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Major]", Storage="_Version_Major", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionMajor
		{
			get
			{
				return this._Version_Major;
			}
			set
			{
				if ((this._Version_Major != value))
				{
					this.OnVersionMajorChanging(value);
					this.SendPropertyChanging();
					this._Version_Major = value;
					this.SendPropertyChanged("VersionMajor");
					this.OnVersionMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Minor]", Storage="_Version_Minor", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionMinor
		{
			get
			{
				return this._Version_Minor;
			}
			set
			{
				if ((this._Version_Minor != value))
				{
					this.OnVersionMinorChanging(value);
					this.SendPropertyChanging();
					this._Version_Minor = value;
					this.SendPropertyChanged("VersionMinor");
					this.OnVersionMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Build]", Storage="_Version_Build", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionBuild
		{
			get
			{
				return this._Version_Build;
			}
			set
			{
				if ((this._Version_Build != value))
				{
					this.OnVersionBuildChanging(value);
					this.SendPropertyChanging();
					this._Version_Build = value;
					this.SendPropertyChanged("VersionBuild");
					this.OnVersionBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Revision]", Storage="_Version_Revision", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionRevision
		{
			get
			{
				return this._Version_Revision;
			}
			set
			{
				if ((this._Version_Revision != value))
				{
					this.OnVersionRevisionChanging(value);
					this.SendPropertyChanging();
					this._Version_Revision = value;
					this.SendPropertyChanged("VersionRevision");
					this.OnVersionRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Archive Table Name]", Storage="_Archive_Table_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ArchiveTableName
		{
			get
			{
				return this._Archive_Table_Name;
			}
			set
			{
				if ((this._Archive_Table_Name != value))
				{
					this.OnArchiveTableNameChanging(value);
					this.SendPropertyChanging();
					this._Archive_Table_Name = value;
					this.SendPropertyChanged("ArchiveTableName");
					this.OnArchiveTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Metadata", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Metadata
		{
			get
			{
				return this._Metadata;
			}
			set
			{
				if ((this._Metadata != value))
				{
					this.OnMetadataChanging(value);
					this.SendPropertyChanging();
					this._Metadata = value;
					this.SendPropertyChanged("Metadata");
					this.OnMetadataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Table Blob Version]", Storage="_Table_Blob_Version", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TableBlobVersion
		{
			get
			{
				return this._Table_Blob_Version;
			}
			set
			{
				if ((this._Table_Blob_Version != value))
				{
					this.OnTableBlobVersionChanging(value);
					this.SendPropertyChanging();
					this._Table_Blob_Version = value;
					this.SendPropertyChanged("TableBlobVersion");
					this.OnTableBlobVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppDataArchive", Storage="_NAV_App", ThisKey="AppID", OtherKey="ID", IsForeignKey=true)]
		public NAVApp NAVApp
		{
			get
			{
				return this._NAV_App.Entity;
			}
			set
			{
				NAVApp previousValue = this._NAV_App.Entity;
				if (((previousValue != value) 
							|| (this._NAV_App.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAV_App.Entity = null;
						previousValue.NAVAppDataArchive.Remove(this);
					}
					this._NAV_App.Entity = value;
					if ((value != null))
					{
						value.NAVAppDataArchive.Add(this);
						this._App_ID = value.ID;
					}
					else
					{
						this._App_ID = default(System.Guid);
					}
					this.SendPropertyChanged("NAVApp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App Installed App]")]
	public partial class NAVAppInstalledApp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private System.Guid _App_ID;
		
		private System.Guid _Package_ID;
		
		private string _Name;
		
		private string _Publisher;
		
		private int _Version_Major;
		
		private int _Version_Minor;
		
		private int _Version_Build;
		
		private int _Version_Revision;
		
		private int _Compatibility_Major;
		
		private int _Compatibility_Minor;
		
		private int _Compatibility_Build;
		
		private int _Compatibility_Revision;
		
		private string _Content_Hash;
		
		private int _Hash_Algorithm;
		
		private int _Extension_Type;
		
		private EntityRef<NAVApp> _NAV_App;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnAppIDChanging(System.Guid value);
    partial void OnAppIDChanged();
    partial void OnPackageIDChanging(System.Guid value);
    partial void OnPackageIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPublisherChanging(string value);
    partial void OnPublisherChanged();
    partial void OnVersionMajorChanging(int value);
    partial void OnVersionMajorChanged();
    partial void OnVersionMinorChanging(int value);
    partial void OnVersionMinorChanged();
    partial void OnVersionBuildChanging(int value);
    partial void OnVersionBuildChanged();
    partial void OnVersionRevisionChanging(int value);
    partial void OnVersionRevisionChanged();
    partial void OnCompatibilityMajorChanging(int value);
    partial void OnCompatibilityMajorChanged();
    partial void OnCompatibilityMinorChanging(int value);
    partial void OnCompatibilityMinorChanged();
    partial void OnCompatibilityBuildChanging(int value);
    partial void OnCompatibilityBuildChanged();
    partial void OnCompatibilityRevisionChanging(int value);
    partial void OnCompatibilityRevisionChanged();
    partial void OnContentHashChanging(string value);
    partial void OnContentHashChanged();
    partial void OnHashAlgorithmChanging(int value);
    partial void OnHashAlgorithmChanged();
    partial void OnExtensionTypeChanging(int value);
    partial void OnExtensionTypeChanged();
    #endregion
		
		public NAVAppInstalledApp()
		{
			this._NAV_App = default(EntityRef<NAVApp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[App ID]", Storage="_App_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid AppID
		{
			get
			{
				return this._App_ID;
			}
			set
			{
				if ((this._App_ID != value))
				{
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._App_ID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Package ID]", Storage="_Package_ID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid PackageID
		{
			get
			{
				return this._Package_ID;
			}
			set
			{
				if ((this._Package_ID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._Package_ID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Publisher", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Publisher
		{
			get
			{
				return this._Publisher;
			}
			set
			{
				if ((this._Publisher != value))
				{
					this.OnPublisherChanging(value);
					this.SendPropertyChanging();
					this._Publisher = value;
					this.SendPropertyChanged("Publisher");
					this.OnPublisherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Major]", Storage="_Version_Major", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionMajor
		{
			get
			{
				return this._Version_Major;
			}
			set
			{
				if ((this._Version_Major != value))
				{
					this.OnVersionMajorChanging(value);
					this.SendPropertyChanging();
					this._Version_Major = value;
					this.SendPropertyChanged("VersionMajor");
					this.OnVersionMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Minor]", Storage="_Version_Minor", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionMinor
		{
			get
			{
				return this._Version_Minor;
			}
			set
			{
				if ((this._Version_Minor != value))
				{
					this.OnVersionMinorChanging(value);
					this.SendPropertyChanging();
					this._Version_Minor = value;
					this.SendPropertyChanged("VersionMinor");
					this.OnVersionMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Build]", Storage="_Version_Build", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionBuild
		{
			get
			{
				return this._Version_Build;
			}
			set
			{
				if ((this._Version_Build != value))
				{
					this.OnVersionBuildChanging(value);
					this.SendPropertyChanging();
					this._Version_Build = value;
					this.SendPropertyChanged("VersionBuild");
					this.OnVersionBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Version Revision]", Storage="_Version_Revision", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VersionRevision
		{
			get
			{
				return this._Version_Revision;
			}
			set
			{
				if ((this._Version_Revision != value))
				{
					this.OnVersionRevisionChanging(value);
					this.SendPropertyChanging();
					this._Version_Revision = value;
					this.SendPropertyChanged("VersionRevision");
					this.OnVersionRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Major]", Storage="_Compatibility_Major", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityMajor
		{
			get
			{
				return this._Compatibility_Major;
			}
			set
			{
				if ((this._Compatibility_Major != value))
				{
					this.OnCompatibilityMajorChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Major = value;
					this.SendPropertyChanged("CompatibilityMajor");
					this.OnCompatibilityMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Minor]", Storage="_Compatibility_Minor", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityMinor
		{
			get
			{
				return this._Compatibility_Minor;
			}
			set
			{
				if ((this._Compatibility_Minor != value))
				{
					this.OnCompatibilityMinorChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Minor = value;
					this.SendPropertyChanged("CompatibilityMinor");
					this.OnCompatibilityMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Build]", Storage="_Compatibility_Build", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityBuild
		{
			get
			{
				return this._Compatibility_Build;
			}
			set
			{
				if ((this._Compatibility_Build != value))
				{
					this.OnCompatibilityBuildChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Build = value;
					this.SendPropertyChanged("CompatibilityBuild");
					this.OnCompatibilityBuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Compatibility Revision]", Storage="_Compatibility_Revision", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CompatibilityRevision
		{
			get
			{
				return this._Compatibility_Revision;
			}
			set
			{
				if ((this._Compatibility_Revision != value))
				{
					this.OnCompatibilityRevisionChanging(value);
					this.SendPropertyChanging();
					this._Compatibility_Revision = value;
					this.SendPropertyChanged("CompatibilityRevision");
					this.OnCompatibilityRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Content Hash]", Storage="_Content_Hash", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ContentHash
		{
			get
			{
				return this._Content_Hash;
			}
			set
			{
				if ((this._Content_Hash != value))
				{
					this.OnContentHashChanging(value);
					this.SendPropertyChanging();
					this._Content_Hash = value;
					this.SendPropertyChanged("ContentHash");
					this.OnContentHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Hash Algorithm]", Storage="_Hash_Algorithm", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int HashAlgorithm
		{
			get
			{
				return this._Hash_Algorithm;
			}
			set
			{
				if ((this._Hash_Algorithm != value))
				{
					this.OnHashAlgorithmChanging(value);
					this.SendPropertyChanging();
					this._Hash_Algorithm = value;
					this.SendPropertyChanged("HashAlgorithm");
					this.OnHashAlgorithmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Extension Type]", Storage="_Extension_Type", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ExtensionType
		{
			get
			{
				return this._Extension_Type;
			}
			set
			{
				if ((this._Extension_Type != value))
				{
					this.OnExtensionTypeChanging(value);
					this.SendPropertyChanging();
					this._Extension_Type = value;
					this.SendPropertyChanged("ExtensionType");
					this.OnExtensionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppInstalledApp", Storage="_NAV_App", ThisKey="AppID,PackageID", OtherKey="ID,PackageID", IsForeignKey=true)]
		public NAVApp NAVApp
		{
			get
			{
				return this._NAV_App.Entity;
			}
			set
			{
				NAVApp previousValue = this._NAV_App.Entity;
				if (((previousValue != value) 
							|| (this._NAV_App.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAV_App.Entity = null;
						previousValue.NAVAppInstalledApp.Remove(this);
					}
					this._NAV_App.Entity = value;
					if ((value != null))
					{
						value.NAVAppInstalledApp.Add(this);
						this._App_ID = value.ID;
						this._Package_ID = value.PackageID;
					}
					else
					{
						this._App_ID = default(System.Guid);
						this._Package_ID = default(System.Guid);
					}
					this.SendPropertyChanged("NAVApp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App Object Metadata]")]
	public partial class NAVAppObjectMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private System.Guid _App_Package_ID;
		
		private int _Object_Type;
		
		private int _Object_ID;
		
		private int _Metadata_Format;
		
		private System.Data.Linq.Binary _Metadata;
		
		private System.Data.Linq.Binary _User_Code;
		
		private System.Data.Linq.Binary _User_AL_Code;
		
		private int _Metadata_Version;
		
		private string _Object_Subtype;
		
		private string _Object_Name;
		
		private string _Metadata_Hash;
		
		private EntityRef<NAVApp> _NAV_App;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnAppPackageIDChanging(System.Guid value);
    partial void OnAppPackageIDChanged();
    partial void OnObjectTypeChanging(int value);
    partial void OnObjectTypeChanged();
    partial void OnObjectIDChanging(int value);
    partial void OnObjectIDChanged();
    partial void OnMetadata_FormatChanging(int value);
    partial void OnMetadata_FormatChanged();
    partial void OnMetadataChanging(System.Data.Linq.Binary value);
    partial void OnMetadataChanged();
    partial void OnUserCodeChanging(System.Data.Linq.Binary value);
    partial void OnUserCodeChanged();
    partial void OnUserALCodeChanging(System.Data.Linq.Binary value);
    partial void OnUserALCodeChanged();
    partial void OnMetadataVersionChanging(int value);
    partial void OnMetadataVersionChanged();
    partial void OnObjectSubtypeChanging(string value);
    partial void OnObjectSubtypeChanged();
    partial void OnObjectNameChanging(string value);
    partial void OnObjectNameChanged();
    partial void OnMetadataHashChanging(string value);
    partial void OnMetadataHashChanged();
    #endregion
		
		public NAVAppObjectMetadata()
		{
			this._NAV_App = default(EntityRef<NAVApp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[App Package ID]", Storage="_App_Package_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid AppPackageID
		{
			get
			{
				return this._App_Package_ID;
			}
			set
			{
				if ((this._App_Package_ID != value))
				{
					this.OnAppPackageIDChanging(value);
					this.SendPropertyChanging();
					this._App_Package_ID = value;
					this.SendPropertyChanged("AppPackageID");
					this.OnAppPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Object Type]", Storage="_Object_Type", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ObjectType
		{
			get
			{
				return this._Object_Type;
			}
			set
			{
				if ((this._Object_Type != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._Object_Type = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Object ID]", Storage="_Object_ID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ObjectID
		{
			get
			{
				return this._Object_ID;
			}
			set
			{
				if ((this._Object_ID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._Object_ID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Metadata Format]", Storage="_Metadata_Format", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Metadata_Format
		{
			get
			{
				return this._Metadata_Format;
			}
			set
			{
				if ((this._Metadata_Format != value))
				{
					this.OnMetadata_FormatChanging(value);
					this.SendPropertyChanging();
					this._Metadata_Format = value;
					this.SendPropertyChanged("Metadata_Format");
					this.OnMetadata_FormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Metadata", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Metadata
		{
			get
			{
				return this._Metadata;
			}
			set
			{
				if ((this._Metadata != value))
				{
					this.OnMetadataChanging(value);
					this.SendPropertyChanging();
					this._Metadata = value;
					this.SendPropertyChanged("Metadata");
					this.OnMetadataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User Code]", Storage="_User_Code", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UserCode
		{
			get
			{
				return this._User_Code;
			}
			set
			{
				if ((this._User_Code != value))
				{
					this.OnUserCodeChanging(value);
					this.SendPropertyChanging();
					this._User_Code = value;
					this.SendPropertyChanged("UserCode");
					this.OnUserCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User AL Code]", Storage="_User_AL_Code", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary UserALCode
		{
			get
			{
				return this._User_AL_Code;
			}
			set
			{
				if ((this._User_AL_Code != value))
				{
					this.OnUserALCodeChanging(value);
					this.SendPropertyChanging();
					this._User_AL_Code = value;
					this.SendPropertyChanged("UserALCode");
					this.OnUserALCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Metadata Version]", Storage="_Metadata_Version", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int MetadataVersion
		{
			get
			{
				return this._Metadata_Version;
			}
			set
			{
				if ((this._Metadata_Version != value))
				{
					this.OnMetadataVersionChanging(value);
					this.SendPropertyChanging();
					this._Metadata_Version = value;
					this.SendPropertyChanged("MetadataVersion");
					this.OnMetadataVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Object Subtype]", Storage="_Object_Subtype", DbType="NVarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectSubtype
		{
			get
			{
				return this._Object_Subtype;
			}
			set
			{
				if ((this._Object_Subtype != value))
				{
					this.OnObjectSubtypeChanging(value);
					this.SendPropertyChanging();
					this._Object_Subtype = value;
					this.SendPropertyChanged("ObjectSubtype");
					this.OnObjectSubtypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Object Name]", Storage="_Object_Name", DbType="NVarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ObjectName
		{
			get
			{
				return this._Object_Name;
			}
			set
			{
				if ((this._Object_Name != value))
				{
					this.OnObjectNameChanging(value);
					this.SendPropertyChanging();
					this._Object_Name = value;
					this.SendPropertyChanged("ObjectName");
					this.OnObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Metadata Hash]", Storage="_Metadata_Hash", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MetadataHash
		{
			get
			{
				return this._Metadata_Hash;
			}
			set
			{
				if ((this._Metadata_Hash != value))
				{
					this.OnMetadataHashChanging(value);
					this.SendPropertyChanging();
					this._Metadata_Hash = value;
					this.SendPropertyChanged("MetadataHash");
					this.OnMetadataHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppObjectMetadata", Storage="_NAV_App", ThisKey="AppPackageID", OtherKey="PackageID", IsForeignKey=true)]
		public NAVApp NAVApp
		{
			get
			{
				return this._NAV_App.Entity;
			}
			set
			{
				NAVApp previousValue = this._NAV_App.Entity;
				if (((previousValue != value) 
							|| (this._NAV_App.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAV_App.Entity = null;
						previousValue.NAVAppObjectMetadata.Remove(this);
					}
					this._NAV_App.Entity = value;
					if ((value != null))
					{
						value.NAVAppObjectMetadata.Add(this);
						this._App_Package_ID = value.PackageID;
					}
					else
					{
						this._App_Package_ID = default(System.Guid);
					}
					this.SendPropertyChanged("NAVApp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App Object Prerequisites]")]
	public partial class NAVAppObjectPrerequisites : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private System.Guid _Package_ID;
		
		private int _Type;
		
		private int _ID;
		
		private EntityRef<NAVApp> _NAV_App;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnPackageIDChanging(System.Guid value);
    partial void OnPackageIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public NAVAppObjectPrerequisites()
		{
			this._NAV_App = default(EntityRef<NAVApp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Package ID]", Storage="_Package_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid PackageID
		{
			get
			{
				return this._Package_ID;
			}
			set
			{
				if ((this._Package_ID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._Package_ID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppObjectPrerequisites", Storage="_NAV_App", ThisKey="PackageID", OtherKey="PackageID", IsForeignKey=true)]
		public NAVApp NAVApp
		{
			get
			{
				return this._NAV_App.Entity;
			}
			set
			{
				NAVApp previousValue = this._NAV_App.Entity;
				if (((previousValue != value) 
							|| (this._NAV_App.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAV_App.Entity = null;
						previousValue.NAVAppObjectPrerequisites.Remove(this);
					}
					this._NAV_App.Entity = value;
					if ((value != null))
					{
						value.NAVAppObjectPrerequisites.Add(this);
						this._Package_ID = value.PackageID;
					}
					else
					{
						this._Package_ID = default(System.Guid);
					}
					this.SendPropertyChanged("NAVApp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App Resource]")]
	public partial class NAVAppResource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private System.Guid _Package_ID;
		
		private int _Type;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Content;
		
		private EntityRef<NAVApp> _NAV_App;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnPackageIDChanging(System.Guid value);
    partial void OnPackageIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContentChanging(System.Data.Linq.Binary value);
    partial void OnContentChanged();
    #endregion
		
		public NAVAppResource()
		{
			this._NAV_App = default(EntityRef<NAVApp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Package ID]", Storage="_Package_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid PackageID
		{
			get
			{
				return this._Package_ID;
			}
			set
			{
				if ((this._Package_ID != value))
				{
					this.OnPackageIDChanging(value);
					this.SendPropertyChanging();
					this._Package_ID = value;
					this.SendPropertyChanged("PackageID");
					this.OnPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppResource", Storage="_NAV_App", ThisKey="PackageID", OtherKey="PackageID", IsForeignKey=true)]
		public NAVApp NAVApp
		{
			get
			{
				return this._NAV_App.Entity;
			}
			set
			{
				NAVApp previousValue = this._NAV_App.Entity;
				if (((previousValue != value) 
							|| (this._NAV_App.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAV_App.Entity = null;
						previousValue.NAVAppResource.Remove(this);
					}
					this._NAV_App.Entity = value;
					if ((value != null))
					{
						value.NAVAppResource.Add(this);
						this._Package_ID = value.PackageID;
					}
					else
					{
						this._Package_ID = default(System.Guid);
					}
					this.SendPropertyChanged("NAVApp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App Tenant Add-In]")]
	public partial class NAVAppTenantAddIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private System.Guid _App_ID;
		
		private string _Add_In_Name;
		
		private string _Public_Key_Token;
		
		private string _Version;
		
		private int _Category;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Resource;
		
		private EntityRef<NAVApp> _NAV_App;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnAppIDChanging(System.Guid value);
    partial void OnAppIDChanged();
    partial void OnAddInNameChanging(string value);
    partial void OnAddInNameChanged();
    partial void OnPublicKeyTokenChanging(string value);
    partial void OnPublicKeyTokenChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnResourceChanging(System.Data.Linq.Binary value);
    partial void OnResourceChanged();
    #endregion
		
		public NAVAppTenantAddIn()
		{
			this._NAV_App = default(EntityRef<NAVApp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[App ID]", Storage="_App_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid AppID
		{
			get
			{
				return this._App_ID;
			}
			set
			{
				if ((this._App_ID != value))
				{
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._App_ID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Add-In Name]", Storage="_Add_In_Name", DbType="NVarChar(220) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string AddInName
		{
			get
			{
				return this._Add_In_Name;
			}
			set
			{
				if ((this._Add_In_Name != value))
				{
					this.OnAddInNameChanging(value);
					this.SendPropertyChanging();
					this._Add_In_Name = value;
					this.SendPropertyChanged("AddInName");
					this.OnAddInNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Public Key Token]", Storage="_Public_Key_Token", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string PublicKeyToken
		{
			get
			{
				return this._Public_Key_Token;
			}
			set
			{
				if ((this._Public_Key_Token != value))
				{
					this.OnPublicKeyTokenChanging(value);
					this.SendPropertyChanging();
					this._Public_Key_Token = value;
					this.SendPropertyChanged("PublicKeyToken");
					this.OnPublicKeyTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="NVarChar(25) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resource", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Resource
		{
			get
			{
				return this._Resource;
			}
			set
			{
				if ((this._Resource != value))
				{
					this.OnResourceChanging(value);
					this.SendPropertyChanging();
					this._Resource = value;
					this.SendPropertyChanged("Resource");
					this.OnResourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppTenantAddIn", Storage="_NAV_App", ThisKey="AppID", OtherKey="ID", IsForeignKey=true)]
		public NAVApp NAVApp
		{
			get
			{
				return this._NAV_App.Entity;
			}
			set
			{
				NAVApp previousValue = this._NAV_App.Entity;
				if (((previousValue != value) 
							|| (this._NAV_App.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAV_App.Entity = null;
						previousValue.NAVAppTenantAddIn.Remove(this);
					}
					this._NAV_App.Entity = value;
					if ((value != null))
					{
						value.NAVAppTenantAddIn.Add(this);
						this._App_ID = value.ID;
					}
					else
					{
						this._App_ID = default(System.Guid);
					}
					this.SendPropertyChanged("NAVApp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[NAV App Tenant App]")]
	public partial class NAVAppTenantApp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Data.Linq.Binary _timestamp;
		
		private string _Tenant_ID;
		
		private System.Guid _App_Package_ID;
		
		private EntityRef<NAVApp> _NAV_App;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntimestampChanging(System.Data.Linq.Binary value);
    partial void OntimestampChanged();
    partial void OnTenantIDChanging(string value);
    partial void OnTenantIDChanged();
    partial void OnAppPackageIDChanging(System.Guid value);
    partial void OnAppPackageIDChanged();
    #endregion
		
		public NAVAppTenantApp()
		{
			this._NAV_App = default(EntityRef<NAVApp>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Tenant ID]", Storage="_Tenant_ID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string TenantID
		{
			get
			{
				return this._Tenant_ID;
			}
			set
			{
				if ((this._Tenant_ID != value))
				{
					this.OnTenantIDChanging(value);
					this.SendPropertyChanging();
					this._Tenant_ID = value;
					this.SendPropertyChanged("TenantID");
					this.OnTenantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[App Package ID]", Storage="_App_Package_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid AppPackageID
		{
			get
			{
				return this._App_Package_ID;
			}
			set
			{
				if ((this._App_Package_ID != value))
				{
					this.OnAppPackageIDChanging(value);
					this.SendPropertyChanging();
					this._App_Package_ID = value;
					this.SendPropertyChanged("AppPackageID");
					this.OnAppPackageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NAVApp_NAVAppTenantApp", Storage="_NAV_App", ThisKey="AppPackageID,TenantID", OtherKey="PackageID,TenantID", IsForeignKey=true)]
		public NAVApp NAVApp
		{
			get
			{
				return this._NAV_App.Entity;
			}
			set
			{
				NAVApp previousValue = this._NAV_App.Entity;
				if (((previousValue != value) 
							|| (this._NAV_App.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NAV_App.Entity = null;
						previousValue.NAVAppTenantApp.Remove(this);
					}
					this._NAV_App.Entity = value;
					if ((value != null))
					{
						value.NAVAppTenantApp.Add(this);
						this._App_Package_ID = value.PackageID;
						this._Tenant_ID = value.TenantID;
					}
					else
					{
						this._App_Package_ID = default(System.Guid);
						this._Tenant_ID = default(string);
					}
					this.SendPropertyChanged("NAVApp");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
